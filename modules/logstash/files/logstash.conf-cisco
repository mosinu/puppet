input {
  stdin {
    type => "stdin-type"
  }

  file {
    type => "syslog"
    # Wildcards work, here :)
    path => [ "/var/log/messages", "/var/log/syslog", "/var/log/secure", "/var/log/remote/*/*/*.log" ]
  }
  #file {
  #  type => "cisco"
  #  path => ["/var/log/network"]
  #}
}

filter {
  # Check if syslog message has PRI using grep.   If so then :
  #   strip the syslog PRI part and create facility and severity fields.
  #   the original syslog message is saved in field %{syslog_raw_message}.
  #   the extracted PRI is available in the %{syslog_pri} field.
  #
  #   You get %{syslog_facility_code} and %{syslog_severity_code} fields.
  #   You also get %{syslog_facility} and %{syslog_severity} fields if the
  #   use_labels option is set True (the default) on syslog_pri filter.
  grep {
    type => "syslog"
    match => ["@message","<\d+>"]
    add_tag => "has_pri"
    drop => false
  }
  grok {
    type => "syslog"
    tags => [ "has_pri" ]
    pattern => [ "<%{POSINT:syslog_pri}>%{SPACE}%{GREEDYDATA:message_remainder}" ]
    add_tag => "got_syslog_pri"
    add_field => [ "syslog_raw_message", "%{@message}" ]
  }
  syslog_pri {
    type => "syslog"
    tags => [ "got_syslog_pri" ]
  }
  mutate {
    type => "syslog"
    tags => [ "got_syslog_pri" ]
    replace => [ "@message", "%{message_remainder}" ]
  }
  mutate {
    # XXX must not be combined with replacement which uses same field
    type => "syslog"
    tags => [ "got_syslog_pri" ]
    remove => [ "message_remainder" ]
  }
  # strip the syslog timestamp and force event timestamp to be the same.
  # the original string is saved in field %{syslog_timestamp}.
  # the original logstash input timestamp is saved in field %{received_at}.
  grok {
    type => "syslog"
    pattern => [ "%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{GREEDYDATA:message_remainder}" ]
    add_tag => "got_syslog_timestamp"
    add_field => [ "received_at", "%{@timestamp}" ]
  }
  mutate {
    type => "syslog"
    tags => [ "got_syslog_timestamp" ]
    replace => [ "@message", "%{message_remainder}" ]
  }
  mutate {
    # XXX must not be combined with replacement which uses same field
    type => "syslog"
    tags => [ "got_syslog_timestamp" ]
    remove => [ "message_remainder" ]
  }
  date {
    type => "syslog"
    tags => [ "got_syslog_timestamp" ]
    # season to taste for your own syslog format(s)
    syslog_timestamp => [ "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
  }
  # strip the host field from the syslog line.
  # the extracted host field becomes the logstash %{@source_host} metadata
  # and is also available in the filed %{syslog_hostname}.
  # the original logstash source_host is saved in field %{logstash_source}.
  grok {
    type => "syslog"
    pattern => [ "%{SYSLOGHOST:syslog_hostname}%{SPACE}%{GREEDYDATA:message_remainder}" ]
    add_tag => "got_syslog_host"
    add_field => [ "logstash_source", "%{@source_host}" ]
  }
  mutate {
    type => "syslog"
    tags => [ "got_syslog_host" ]
    replace => [ "@source_host", "%{syslog_hostname}" ]
    replace => [ "@message", "%{message_remainder}" ]
  }
  mutate {
    # message_remainder no longer needed.
    type => "syslog"
    tags => [ "got_syslog_host" ]
    remove => [ "message_remainder" ]
  }
  

  # strip the program and optional pid field from the syslog line.
  # available in the field %{syslog_program} and %{syslog_pid}.
  grok {
    type => "syslog"
    pattern => [ "%{PROG:syslog_program}(?:\[%{POSINT:syslog_pid}\])?:%{SPACE}%{GREEDYDATA:message_remainder}" ]
    add_tag => "got_syslog_program"
  }
  mutate {
    type => "syslog"
    tags => [ "got_syslog_program" ]
    replace => [ "@message", "%{message_remainder}" ]
  }
  mutate {
    # message_remainder no longer needed.
    type => "syslog"
    tags => [ "got_syslog_program" ]
    remove => [ "message_remainder" ]
  }

  # We handle the syslog part of the Cisco PIX/ASA messages
   grok {
      type => "cisco"
      tags => "cisco-fw"
      patterns_dir => "/opt/logstash/patterns"
      pattern => "^<%{POSINT:syslog_pri}>(?:(%{TIMESTAMP_ISO8601:timestamp8601} |%{CISCOTIMESTAMP:timestamp} ))?%{SYSLOGHOST:logsource}?[ :]+%{GREEDYDATA:syslog_message}"
#     pattern =>["%{SYSLOGTIMESTAMP:cisco_timestamp} %{IPORHOST:originid} : \%%{DATA:cfacility}-%{DATA:severity}-%{DATA:mnemonic}: %{GREEDYDATA:data}"]
     add_tag => [ "cisco-fw" ]
   }
   syslog_pri {
      tags => "cisco-fw"
   }
   mutate {
      type => "cisco"
      tags => "cisco-fw"
      exclude_tags => "_grokparsefailure"
      replace => [ "@source_host", "%{logsource}" ]
      replace => [ "@message", "%{syslog_message}" ]
      replace => [ " <at> message", "%{data}" ]
      replace => [ " <at> source_host", "%{originid}" ]
   }
  # for optional fields (device name in message, Cisco syslog tag)
  grok {
    tags => "cisco-fw"
    patterns_dir => "/opt/logstash/patterns"
    pattern => "(?:%{SYSLOGHOST:device} )?(?:: )?%%{CISCOFWTAG:ciscotag}:%{GREEDYDATA}"
  }

  # we extract fields
  grok {
    tags => "cisco-fw"
    break_on_match => false
    patterns_dir => "/opt/logstash/patterns"
    pattern => [
    "%{CISCOFW1}",
    "%{CISCOFW2}",
    "%{CISCOFW3}",
    "%{CISCOFW4}",
    "%{CISCOFW4b}",
    "%{CISCOFW5}",
    "%{CISCOFW6a}",
    "%{CISCOFW6b}",
    "%{CISCOFW7}",
    "%{CISCOFW8}",
    "%{CISCOFW9}",
    "%{CISCOFW10}",
    "%{CISCOFW11}",
    "%{CISCOFW12}",
    "%{CISCOFW13}",
    "%{CISCOFW14}",
    "%{CISCOFW15}",
    "%{CISCOFW16}",
    "%{CISCOFW17}",
    "%{CISCOFW18}"
    ]
  }

  date {
    tags => "cisco-fw"
    timestamp8601 => ISO8601
    timestamp => [
    "MMM dd HH:mm:ss.SSS",
    "MMM  d HH:mm:ss.SSS",
    "MMM dd HH:mm:ss",
    "MMM  d HH:mm:ss",
    "MMM dd yyyy HH:mm:ss.SSS",
    "MMM  d yyyy HH:mm:ss.SSS",
    "MMM dd yyyy HH:mm:ss",
    "MMM  d yyyy HH:mm:ss"
    ]
    innertimestamp => [
    "MMM dd HH:mm:ss.SSS",
    "MMM  d HH:mm:ss.SSS",
    "MMM dd HH:mm:ss",
    "MMM  d HH:mm:ss",
    "MMM dd yyyy HH:mm:ss.SSS",
    "MMM  d yyyy HH:mm:ss.SSS",
    "MMM dd yyyy HH:mm:ss",
    "MMM  d yyyy HH:mm:ss",
    "yyyy-MM-dd HH:mm:ss.SSS",
    "yyyy-MM-dd HH:mm:ss"
    ]

    locale => "Locale.US"
  }
  ## Any extra processing you wish to do should be done here before
  ## closing filter stanza and proceeding to output stanzas.  
  ## See logstash-indexer-NAT.conf example.

}
output {
  stdout { }

  elasticsearch { 
    host => "ral-elasticsearch.gpi.com"
  }
}
